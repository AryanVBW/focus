name: Auto Release and APK Build

on:
  push:
    branches:
      - app-main
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle
          
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        
      - name: Get current version
        id: current_version
        run: |
          VERSION_CODE=$(grep "versionCode" app/build.gradle | awk '{print $2}')
          VERSION_NAME=$(grep "versionName" app/build.gradle | awk '{print $2}' | tr -d '"')
          echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT
          echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION_NAME ($VERSION_CODE)"
          
      - name: Bump version
        id: bump_version
        run: |
          # Get current version
          CURRENT_VERSION_CODE=$(grep "versionCode" app/build.gradle | awk '{print $2}')
          CURRENT_VERSION_NAME=$(grep "versionName" app/build.gradle | awk '{print $2}' | tr -d '"')
          
          # Calculate new version
          NEW_VERSION_CODE=$((CURRENT_VERSION_CODE + 1))
          
          # Parse semantic version (major.minor.patch)
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION_NAME"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}
          
          # Increment patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION_NAME="$MAJOR.$MINOR.$NEW_PATCH"
          
          # Update build.gradle
          sed -i "s/versionCode $CURRENT_VERSION_CODE/versionCode $NEW_VERSION_CODE/" app/build.gradle
          sed -i "s/versionName \"$CURRENT_VERSION_NAME\"/versionName \"$NEW_VERSION_NAME\"/" app/build.gradle
          
          echo "new_version_code=$NEW_VERSION_CODE" >> $GITHUB_OUTPUT
          echo "new_version_name=$NEW_VERSION_NAME" >> $GITHUB_OUTPUT
          echo "Bumped version: $CURRENT_VERSION_NAME ($CURRENT_VERSION_CODE) -> $NEW_VERSION_NAME ($NEW_VERSION_CODE)"
          
      - name: Commit version bump
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add app/build.gradle
          git commit -m "chore: bump version to ${{ steps.bump_version.outputs.new_version_name }} (build ${{ steps.bump_version.outputs.new_version_code }})"
          git push
          
      - name: Decode Keystore
        id: decode_keystore
        run: |
          if [ -n "${{ secrets.KEYSTORE_BASE64 }}" ]; then
            echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > $GITHUB_WORKSPACE/keystore.jks
            echo "keystore_exists=true" >> $GITHUB_OUTPUT
          else
            echo "keystore_exists=false" >> $GITHUB_OUTPUT
            echo "Warning: KEYSTORE_BASE64 secret not found. Building debug APK instead."
          fi
          
      - name: Create keystore.properties
        if: steps.decode_keystore.outputs.keystore_exists == 'true'
        run: |
          echo "storeFile=$GITHUB_WORKSPACE/keystore.jks" > keystore.properties
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" >> keystore.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> keystore.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> keystore.properties
          
      - name: Build Release APK
        if: steps.decode_keystore.outputs.keystore_exists == 'true'
        run: ./gradlew assembleRelease --stacktrace
        
      - name: Build Debug APK (fallback)
        if: steps.decode_keystore.outputs.keystore_exists == 'false'
        run: ./gradlew assembleDebug --stacktrace
        
      - name: Prepare APK for release
        id: prepare_apk
        run: |
          if [ -f app/build/outputs/apk/release/app-release.apk ]; then
            APK_PATH="app/build/outputs/apk/release/app-release.apk"
            APK_NAME="Focus-v${{ steps.bump_version.outputs.new_version_name }}-release.apk"
            BUILD_TYPE="release"
          else
            APK_PATH="app/build/outputs/apk/debug/app-debug.apk"
            APK_NAME="Focus-v${{ steps.bump_version.outputs.new_version_name }}-debug.apk"
            BUILD_TYPE="debug"
          fi
          
          cp $APK_PATH $APK_NAME
          echo "apk_path=$APK_NAME" >> $GITHUB_OUTPUT
          echo "build_type=$BUILD_TYPE" >> $GITHUB_OUTPUT
          
          # Get APK size
          APK_SIZE=$(du -h $APK_NAME | cut -f1)
          echo "apk_size=$APK_SIZE" >> $GITHUB_OUTPUT
          
      - name: Generate Release Notes
        id: release_notes
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" -10)
          else
            COMMITS=$(git log $LAST_TAG..HEAD --pretty=format:"- %s (%h)")
          fi
          
          # Create release notes
          cat > release_notes.md << EOF
          ## 🚀 Focus v${{ steps.bump_version.outputs.new_version_name }}
          
          **Build:** ${{ steps.bump_version.outputs.new_version_code }}  
          **Type:** ${{ steps.prepare_apk.outputs.build_type }}  
          **Size:** ${{ steps.prepare_apk.outputs.apk_size }}  
          **Date:** $(date '+%Y-%m-%d %H:%M:%S UTC')
          
          ### 📝 Changes in this release
          
          $COMMITS
          
          ### 📱 Installation
          
          1. Download the APK file below
          2. Enable "Install from Unknown Sources" in your Android settings
          3. Open the APK file and follow the installation prompts
          4. Grant necessary permissions for Focus to work properly
          
          ### 🔐 Permissions Required
          
          - **Accessibility Service**: To detect and block distracting content
          - **Usage Stats**: For tracking app usage time
          - **Display Over Other Apps**: To show blocking pages
          - **Query All Packages**: To show list of installed apps
          
          ### ⚠️ Important Notes
          
          - This is an automated build from the latest commit
          - Make sure to uninstall previous versions before installing
          - Your settings and data will be preserved during updates
          
          ---
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/$LAST_TAG...v${{ steps.bump_version.outputs.new_version_name }}
          EOF
          
          # Output for GitHub Actions
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Create Git Tag
        run: |
          git tag -a "v${{ steps.bump_version.outputs.new_version_name }}" -m "Release v${{ steps.bump_version.outputs.new_version_name }}"
          git push origin "v${{ steps.bump_version.outputs.new_version_name }}"
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.bump_version.outputs.new_version_name }}
          name: Focus v${{ steps.bump_version.outputs.new_version_name }}
          body_path: release_notes.md
          files: ${{ steps.prepare_apk.outputs.apk_path }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Upload APK as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Focus-v${{ steps.bump_version.outputs.new_version_name }}-${{ steps.prepare_apk.outputs.build_type }}
          path: ${{ steps.prepare_apk.outputs.apk_path }}
          retention-days: 90
          
      - name: Summary
        run: |
          echo "## 🎉 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** v${{ steps.bump_version.outputs.new_version_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Build:** ${{ steps.bump_version.outputs.new_version_code }}" >> $GITHUB_STEP_SUMMARY
          echo "**Type:** ${{ steps.prepare_apk.outputs.build_type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Size:** ${{ steps.prepare_apk.outputs.apk_size }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ APK built successfully and release created!" >> $GITHUB_STEP_SUMMARY
